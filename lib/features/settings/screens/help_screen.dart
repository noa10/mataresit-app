import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import '../../../core/constants/app_constants.dart';

class HelpScreen extends StatefulWidget {
  const HelpScreen({super.key});

  @override
  State<HelpScreen> createState() => _HelpScreenState();
}

class _HelpScreenState extends State<HelpScreen> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  String? _selectedCategory;

  final List<HelpCategory> _categories = [
    HelpCategory(
      id: 'getting-started',
      title: 'Getting Started',
      description: 'Learn the basics of uploading and managing your receipts.',
      icon: Icons.book_outlined,
    ),
    HelpCategory(
      id: 'account-billing',
      title: 'Account & Billing',
      description: 'Manage your subscription, payment methods, and profile.',
      icon: Icons.credit_card_outlined,
    ),
    HelpCategory(
      id: 'ai-processing',
      title: 'AI & Processing',
      description:
          'Understand how our AI works and troubleshoot processing issues.',
      icon: Icons.smart_toy_outlined,
    ),
  ];

  final List<FaqItem> _faqItems = [
    FaqItem(
      question: 'How do I upload a receipt?',
      answer:
          'You can upload receipts by navigating to the Dashboard and using the \'Upload\' button. You can drag and drop files or select them from your device. We support JPEG, PNG, and PDF formats.',
      category: 'getting-started',
    ),
    FaqItem(
      question:
          'What is the difference between OCR+AI and AI Vision processing?',
      answer:
          'AI Vision directly analyzes the image of the receipt for higher accuracy, especially with complex layouts. OCR+AI first extracts text and then uses AI to structure it. We recommend AI Vision for the best results.',
      category: 'ai-processing',
    ),
    FaqItem(
      question: 'How can I improve search results?',
      answer:
          'Use natural language! Try searching for things like \'coffee from last week\' or \'groceries from Walmart over \$50\'. If your initial search doesn\'t work, ensure your receipts have embeddings generated by visiting the Admin settings.',
      category: 'ai-processing',
    ),
    FaqItem(
      question: 'How do I manage my subscription?',
      answer:
          'You can manage your subscription, view invoices, and update payment methods by going to the Pricing page and clicking the \'Manage Subscription\' button, which will take you to our secure billing portal.',
      category: 'account-billing',
    ),
    FaqItem(
      question: 'What file formats are supported for receipt uploads?',
      answer:
          'We support JPEG, PNG, and PDF file formats. For best results, ensure your images are clear and well-lit with all text visible.',
      category: 'getting-started',
    ),
    FaqItem(
      question: 'How accurate is the AI data extraction?',
      answer:
          'Our AI achieves high accuracy rates, especially with clear, well-lit receipts. The system provides confidence scores for each extracted field, and you can always review and correct any data before saving.',
      category: 'ai-processing',
    ),
    FaqItem(
      question: 'Can I export my receipt data?',
      answer:
          'Yes! You can export your data in various formats including CSV, JSON, and PDF reports. Go to the Analysis page to access export options and generate custom reports.',
      category: 'getting-started',
    ),
    FaqItem(
      question: 'Is my data secure?',
      answer:
          'Absolutely. We use enterprise-grade security with encrypted storage, secure API endpoints, and strict access controls. Your data is stored securely and never shared with third parties.',
      category: 'account-billing',
    ),
    FaqItem(
      question: 'What AI models do you support?',
      answer:
          'We use Google Gemini as our default and primary AI processing engine across all plans. This ensures consistent, high-quality AI processing for all users regardless of their subscription tier.',
      category: 'ai-processing',
    ),
    FaqItem(
      question: 'How do I set up batch processing?',
      answer:
          'Batch processing is available on Pro and Max plans. Simply select multiple receipts on your dashboard and use the batch processing option to process them all at once.',
      category: 'getting-started',
    ),
  ];

  List<FaqItem> get _filteredFaqItems {
    List<FaqItem> items = _faqItems;

    // Filter by category if selected
    if (_selectedCategory != null) {
      items = items
          .where((item) => item.category == _selectedCategory)
          .toList();
    }

    // Filter by search query
    if (_searchQuery.isNotEmpty) {
      final query = _searchQuery.toLowerCase();
      items = items
          .where(
            (item) =>
                item.question.toLowerCase().contains(query) ||
                item.answer.toLowerCase().contains(query),
          )
          .toList();
    }

    return items;
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('navigation.help'.tr()), elevation: 0),
      body: Column(
        children: [
          // Header Section
          Container(
            padding: const EdgeInsets.all(AppConstants.defaultPadding),
            decoration: BoxDecoration(
              color: Theme.of(context).primaryColor.withValues(alpha: 0.1),
            ),
            child: Column(
              children: [
                Icon(
                  Icons.help_center_outlined,
                  size: 64,
                  color: Theme.of(context).primaryColor,
                ),
                const SizedBox(height: AppConstants.defaultPadding),
                Text(
                  'Help Center',
                  style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: AppConstants.smallPadding),
                Text(
                  'How can we help you today?',
                  style: Theme.of(
                    context,
                  ).textTheme.bodyLarge?.copyWith(color: Colors.grey[600]),
                ),
                const SizedBox(height: AppConstants.defaultPadding),
                // Search Bar
                TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: 'Search for help...',
                    prefixIcon: const Icon(Icons.search),
                    suffixIcon: _searchQuery.isNotEmpty
                        ? IconButton(
                            icon: const Icon(Icons.clear),
                            onPressed: () {
                              _searchController.clear();
                              setState(() {
                                _searchQuery = '';
                                _selectedCategory = null;
                              });
                            },
                          )
                        : null,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(
                        AppConstants.borderRadius,
                      ),
                    ),
                    filled: true,
                    fillColor: Theme.of(context).cardColor,
                  ),
                  onChanged: (value) {
                    setState(() {
                      _searchQuery = value;
                      _selectedCategory = null; // Clear category when searching
                    });
                  },
                ),
                if (_searchQuery.isNotEmpty || _selectedCategory != null)
                  Padding(
                    padding: const EdgeInsets.only(
                      top: AppConstants.smallPadding,
                    ),
                    child: Row(
                      children: [
                        Chip(
                          label: Text(
                            '${_filteredFaqItems.length} result${_filteredFaqItems.length != 1 ? 's' : ''} found',
                          ),
                          backgroundColor: Theme.of(
                            context,
                          ).primaryColor.withValues(alpha: 0.1),
                        ),
                        const SizedBox(width: AppConstants.smallPadding),
                        if (_searchQuery.isNotEmpty ||
                            _selectedCategory != null)
                          TextButton(
                            onPressed: () {
                              _searchController.clear();
                              setState(() {
                                _searchQuery = '';
                                _selectedCategory = null;
                              });
                            },
                            child: const Text('Clear filters'),
                          ),
                      ],
                    ),
                  ),
              ],
            ),
          ),

          // Content
          Expanded(
            child: ListView(
              padding: const EdgeInsets.all(AppConstants.defaultPadding),
              children: [
                // Categories Section (only show if no search query)
                if (_searchQuery.isEmpty) ...[
                  Text(
                    'Browse Categories',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: AppConstants.defaultPadding),
                  ..._categories.map(
                    (category) => _buildCategoryCard(category),
                  ),
                  const SizedBox(height: AppConstants.largePadding),
                ],

                // FAQ Section
                Text(
                  _searchQuery.isNotEmpty
                      ? 'Search Results'
                      : _selectedCategory != null
                      ? 'Category Results'
                      : 'Frequently Asked Questions',
                  style: Theme.of(
                    context,
                  ).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: AppConstants.defaultPadding),

                if (_filteredFaqItems.isNotEmpty)
                  ..._filteredFaqItems.map((item) => _buildFaqItem(item))
                else if (_searchQuery.isNotEmpty || _selectedCategory != null)
                  _buildNoResultsWidget(),

                const SizedBox(height: AppConstants.largePadding),

                // Contact Support Section
                _buildContactSupportSection(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryCard(HelpCategory category) {
    final isSelected = _selectedCategory == category.id;

    return Card(
      margin: const EdgeInsets.only(bottom: AppConstants.smallPadding),
      elevation: isSelected ? 4 : 1,
      color: isSelected
          ? Theme.of(context).primaryColor.withValues(alpha: 0.1)
          : null,
      child: ListTile(
        leading: Icon(
          category.icon,
          color: Theme.of(context).primaryColor,
          size: 32,
        ),
        title: Text(
          category.title,
          style: Theme.of(
            context,
          ).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
        subtitle: Text(category.description),
        trailing: isSelected
            ? Icon(Icons.check_circle, color: Theme.of(context).primaryColor)
            : const Icon(Icons.chevron_right),
        onTap: () {
          setState(() {
            _selectedCategory = isSelected ? null : category.id;
            _searchQuery = '';
            _searchController.clear();
          });
        },
      ),
    );
  }

  Widget _buildFaqItem(FaqItem item) {
    return Card(
      margin: const EdgeInsets.only(bottom: AppConstants.smallPadding),
      child: ExpansionTile(
        title: Text(
          item.question,
          style: Theme.of(
            context,
          ).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w600),
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(AppConstants.defaultPadding),
            child: Text(
              item.answer,
              style: Theme.of(
                context,
              ).textTheme.bodyMedium?.copyWith(color: Colors.grey[700]),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNoResultsWidget() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppConstants.largePadding),
        child: Column(
          children: [
            Icon(Icons.search_off, size: 64, color: Colors.grey[400]),
            const SizedBox(height: AppConstants.defaultPadding),
            Text(
              'No results found',
              style: Theme.of(
                context,
              ).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: AppConstants.smallPadding),
            Text(
              _searchQuery.isNotEmpty
                  ? 'No results found for \'$_searchQuery\''
                  : 'No results found in this category',
              style: Theme.of(
                context,
              ).textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: AppConstants.defaultPadding),
            ElevatedButton(
              onPressed: () {
                _searchController.clear();
                setState(() {
                  _searchQuery = '';
                  _selectedCategory = null;
                });
              },
              child: const Text('Clear filters'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContactSupportSection() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppConstants.defaultPadding),
        child: Column(
          children: [
            Icon(
              Icons.support_agent,
              size: 48,
              color: Theme.of(context).primaryColor,
            ),
            const SizedBox(height: AppConstants.defaultPadding),
            Text(
              'Can\'t find what you\'re looking for?',
              style: Theme.of(
                context,
              ).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: AppConstants.smallPadding),
            Text(
              'Our support team is here to help.',
              style: Theme.of(
                context,
              ).textTheme.bodyMedium?.copyWith(color: Colors.grey[600]),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: AppConstants.defaultPadding),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      // TODO: Implement email support
                    },
                    icon: const Icon(Icons.email),
                    label: const Text('Email Support'),
                  ),
                ),
                const SizedBox(width: AppConstants.smallPadding),
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () {
                      // TODO: Implement live chat
                    },
                    icon: const Icon(Icons.chat),
                    label: const Text('Live Chat'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

// Model classes
class HelpCategory {
  final String id;
  final String title;
  final String description;
  final IconData icon;

  const HelpCategory({
    required this.id,
    required this.title,
    required this.description,
    required this.icon,
  });
}

class FaqItem {
  final String question;
  final String answer;
  final String category;

  const FaqItem({
    required this.question,
    required this.answer,
    required this.category,
  });
}
