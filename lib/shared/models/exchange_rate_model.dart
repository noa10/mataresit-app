import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'exchange_rate_model.g.dart';

/// Represents an exchange rate between two currencies
@JsonSerializable()
class ExchangeRateModel extends Equatable {
  final String id;
  
  @JsonKey(name: 'base_currency')
  final String baseCurrency;
  
  @JsonKey(name: 'target_currency')
  final String targetCurrency;
  
  @JsonKey(name: 'exchange_rate')
  final double exchangeRate;
  
  @JsonKey(name: 'rate_date')
  final DateTime rateDate;
  
  final String source;
  
  @JsonKey(name: 'is_active')
  final bool isActive;
  
  @JsonKey(name: 'created_at')
  final DateTime createdAt;
  
  @JsonKey(name: 'updated_at')
  final DateTime updatedAt;

  const ExchangeRateModel({
    required this.id,
    required this.baseCurrency,
    required this.targetCurrency,
    required this.exchangeRate,
    required this.rateDate,
    this.source = 'fawazahmed0',
    this.isActive = true,
    required this.createdAt,
    required this.updatedAt,
  });

  /// Create from JSON
  factory ExchangeRateModel.fromJson(Map<String, dynamic> json) =>
      _$ExchangeRateModelFromJson(json);

  /// Convert to JSON
  Map<String, dynamic> toJson() => _$ExchangeRateModelToJson(this);

  /// Create a copy with updated fields
  ExchangeRateModel copyWith({
    String? id,
    String? baseCurrency,
    String? targetCurrency,
    double? exchangeRate,
    DateTime? rateDate,
    String? source,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return ExchangeRateModel(
      id: id ?? this.id,
      baseCurrency: baseCurrency ?? this.baseCurrency,
      targetCurrency: targetCurrency ?? this.targetCurrency,
      exchangeRate: exchangeRate ?? this.exchangeRate,
      rateDate: rateDate ?? this.rateDate,
      source: source ?? this.source,
      isActive: isActive ?? this.isActive,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  /// Check if the rate is fresh (within specified hours)
  bool isFresh({int maxAgeHours = 24}) {
    final now = DateTime.now();
    final ageInHours = now.difference(updatedAt).inHours;
    return ageInHours <= maxAgeHours;
  }

  /// Get the inverse exchange rate
  double get inverseRate => 1.0 / exchangeRate;

  /// Get rate key for caching
  String get rateKey => '${baseCurrency}_TO_$targetCurrency';

  /// Get inverse rate key
  String get inverseRateKey => '${targetCurrency}_TO_$baseCurrency';

  @override
  List<Object?> get props => [
        id,
        baseCurrency,
        targetCurrency,
        exchangeRate,
        rateDate,
        source,
        isActive,
        createdAt,
        updatedAt,
      ];

  @override
  String toString() => 
      'ExchangeRateModel($baseCurrency -> $targetCurrency: $exchangeRate)';
}

/// Represents a collection of exchange rates from an API response
class ExchangeRateResponse extends Equatable {
  final DateTime date;
  final String baseCurrency;
  final Map<String, double> rates;

  const ExchangeRateResponse({
    required this.date,
    required this.baseCurrency,
    required this.rates,
  });

  /// Create from JSON (fawazahmed0 API format)
  factory ExchangeRateResponse.fromJson(Map<String, dynamic> json) {
    // Handle fawazahmed0 API format
    final date = DateTime.parse(json['date'] as String);
    final baseCurrency = json.keys.firstWhere(
      (key) => key != 'date',
      orElse: () => 'usd',
    ).toUpperCase();
    
    final ratesData = json[baseCurrency.toLowerCase()] as Map<String, dynamic>;
    final rates = <String, double>{};
    
    ratesData.forEach((key, value) {
      if (value is num) {
        rates[key.toUpperCase()] = value.toDouble();
      }
    });

    return ExchangeRateResponse(
      date: date,
      baseCurrency: baseCurrency,
      rates: rates,
    );
  }

  /// Convert to JSON
  Map<String, dynamic> toJson() => {
        'date': date.toIso8601String(),
        'baseCurrency': baseCurrency,
        'rates': rates,
      };

  /// Get rate for specific currency
  double? getRateFor(String targetCurrency) {
    return rates[targetCurrency.toUpperCase()];
  }

  /// Convert to list of ExchangeRateModel objects
  List<ExchangeRateModel> toExchangeRateModels() {
    return rates.entries.map((entry) {
      return ExchangeRateModel(
        id: '', // Will be generated by database
        baseCurrency: baseCurrency,
        targetCurrency: entry.key,
        exchangeRate: entry.value,
        rateDate: date,
        source: 'fawazahmed0',
        isActive: true,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
    }).toList();
  }

  @override
  List<Object?> get props => [date, baseCurrency, rates];

  @override
  String toString() => 
      'ExchangeRateResponse($baseCurrency, ${rates.length} rates, $date)';
}
