
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '../../types/supabase';

// Use environment variables for local development, fallback to production values
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://mpmkbtsufihzdelrlszs.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1wbWtidHN1ZmloemRlbHJsc3pzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwMTIzODksImV4cCI6MjA1ODU4ODM4OX0.25ZyBSIl0TQxXFZsaT1R55118Tn8b6Ri8N556gOQyPY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create Supabase client with optimized real-time configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
    // Heartbeat interval to keep connection alive (configurable, default: 30 seconds)
    heartbeatIntervalMs: parseInt(import.meta.env.VITE_REALTIME_HEARTBEAT_INTERVAL || '30000', 10),
    // Reconnect timeout settings with exponential backoff
    reconnectAfterMs: (tries: number) => Math.min(1000 * Math.pow(2, tries), 30000),
    // Logger for debugging - use proper logger function format
    logger: (import.meta.env.DEV || import.meta.env.VITE_REALTIME_DEBUG === 'true')
      ? (kind: string, msg: string, data?: any) => {
          console.log(`[Supabase Realtime ${kind}]`, msg, data || '');
        }
      : undefined,
  },
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    // Storage key for auth state
    storageKey: 'mataresit-auth',
  },
  // Global configuration
  global: {
    headers: {
      'X-Client-Info': 'mataresit-web',
    },
  },
});

// Initialize real-time connection when client is created
// This helps ensure the connection is established early
if (typeof window !== 'undefined') {
  // Only in browser environment

  // Connect to real-time service
  // Note: Connection status will be logged through individual channel subscriptions
  supabase.realtime.connect();

  if (import.meta.env.DEV) {
    console.log('ðŸ”„ Supabase real-time client initialized (v2)');
  }
}
