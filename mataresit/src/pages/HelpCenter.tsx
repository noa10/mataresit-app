import React, { useState, useMemo } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { LifeBuoy, BookOpen, User, CreditCard, Search, Mail, MessageCircle, ExternalLink } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

const faqItems = [
  {
    question: "How do I upload a receipt?",
    answer: "You can upload receipts by navigating to the Dashboard and using the 'Upload' button. You can drag and drop files or select them from your device. We support JPEG, PNG, and PDF formats.",
    category: "getting-started"
  },
  {
    question: "What is the difference between OCR+AI and AI Vision processing?",
    answer: "AI Vision directly analyzes the image of the receipt for higher accuracy, especially with complex layouts. OCR+AI first extracts text and then uses AI to structure it. We recommend AI Vision for the best results.",
    category: "ai-processing"
  },
  {
    question: "How can I improve search results?",
    answer: "Use natural language! Try searching for things like 'coffee from last week' or 'groceries from Walmart over $50'. If your initial search doesn't work, ensure your receipts have embeddings generated by visiting the Admin settings.",
    category: "ai-processing"
  },
  {
    question: "How do I manage my subscription?",
    answer: "You can manage your subscription, view invoices, and update payment methods by going to the Pricing page and clicking the 'Manage Subscription' button, which will take you to our secure billing portal.",
    category: "account-billing"
  },
  {
    question: "What file formats are supported for receipt uploads?",
    answer: "We support JPEG, PNG, and PDF file formats. For best results, ensure your images are clear and well-lit with all text visible.",
    category: "getting-started"
  },
  {
    question: "How accurate is the AI data extraction?",
    answer: "Our AI achieves high accuracy rates, especially with clear, well-lit receipts. The system provides confidence scores for each extracted field, and you can always review and correct any data before saving.",
    category: "ai-processing"
  },
  {
    question: "Can I export my receipt data?",
    answer: "Yes! You can export your data in various formats including CSV, JSON, and PDF reports. Go to the Analysis page to access export options and generate custom reports.",
    category: "getting-started"
  },
  {
    question: "Is my data secure?",
    answer: "Absolutely. We use enterprise-grade security with encrypted storage, secure API endpoints, and strict access controls. Your data is stored securely and never shared with third parties.",
    category: "account-billing"
  },
  {
    question: "What AI models do you support?",
    answer: "We use Google Gemini as our default and primary AI processing engine across all plans. This ensures consistent, high-quality AI processing for all users regardless of their subscription tier.",
    category: "ai-processing"
  },
  {
    question: "How do I set up batch processing?",
    answer: "Batch processing is available on Pro and Max plans. Simply select multiple receipts on your dashboard and use the batch processing option to process them all at once.",
    category: "getting-started"
  }
];

const helpCategories = [
  {
    title: "Getting Started",
    description: "Learn the basics of uploading and managing your receipts.",
    icon: <BookOpen className="h-6 w-6 text-primary" />,
    id: "getting-started"
  },
  {
    title: "Account & Billing",
    description: "Manage your subscription, payment methods, and profile.",
    icon: <CreditCard className="h-6 w-6 text-primary" />,
    id: "account-billing"
  },
  {
    title: "AI & Processing",
    description: "Understand how our AI works and troubleshoot processing issues.",
    icon: <User className="h-6 w-6 text-primary" />,
    id: "ai-processing"
  }
];

export default function HelpCenter() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);

  // Filter FAQ items based on search query and category
  const filteredFaqItems = useMemo(() => {
    let items = faqItems;
    
    // Filter by category if selected
    if (selectedCategory) {
      items = items.filter(item => item.category === selectedCategory);
    }
    
    // Filter by search query
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      items = items.filter(item => 
        item.question.toLowerCase().includes(query) || 
        item.answer.toLowerCase().includes(query)
      );
    }
    
    return items;
  }, [searchQuery, selectedCategory]);

  const handleCategoryClick = (categoryId: string) => {
    setSelectedCategory(selectedCategory === categoryId ? null : categoryId);
    setSearchQuery(''); // Clear search when selecting category
  };

  return (
    <div className="container mx-auto px-4 py-12">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center mb-12"
      >
        <LifeBuoy className="h-16 w-16 mx-auto text-primary mb-4" />
        <h1 className="text-4xl md:text-5xl font-bold tracking-tight">Help Center</h1>
        <p className="mt-4 text-lg text-muted-foreground">How can we help you today?</p>
        <div className="mt-6 max-w-lg mx-auto relative">
          <Input 
            placeholder="Search for help..." 
            className="pr-10 h-12 text-base" 
            value={searchQuery}
            onChange={(e) => {
              setSearchQuery(e.target.value);
              setSelectedCategory(null); // Clear category when searching
            }}
          />
          <Search className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
        </div>
        {(searchQuery || selectedCategory) && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-4 flex items-center justify-center gap-2"
          >
            <Badge variant="secondary" className="text-sm">
              {filteredFaqItems.length} result{filteredFaqItems.length !== 1 ? 's' : ''} found
            </Badge>
            {(searchQuery || selectedCategory) && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => {
                  setSearchQuery('');
                  setSelectedCategory(null);
                }}
              >
                Clear filters
              </Button>
            )}
          </motion.div>
        )}
      </motion.div>

      <motion.section
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="mb-16"
      >
        <h2 className="text-2xl font-bold text-center mb-8">Browse Categories</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {helpCategories.map((category, index) => (
            <Card 
              key={index} 
              className={`hover:shadow-lg transition-all cursor-pointer ${
                selectedCategory === category.id ? 'ring-2 ring-primary bg-primary/5' : ''
              }`}
              onClick={() => handleCategoryClick(category.id)}
            >
              <CardHeader className="flex flex-row items-center gap-4">
                {category.icon}
                <CardTitle>{category.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">{category.description}</p>
                {selectedCategory === category.id && (
                  <Badge className="mt-2" variant="default">
                    Active Filter
                  </Badge>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      </motion.section>

      <motion.section
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
      >
        <h2 className="text-2xl font-bold text-center mb-8">
          {searchQuery ? 'Search Results' : selectedCategory ? 'Category Results' : 'Frequently Asked Questions'}
        </h2>
        {filteredFaqItems.length > 0 ? (
          <Accordion type="single" collapsible className="w-full max-w-3xl mx-auto">
            {filteredFaqItems.map((item, index) => (
              <AccordionItem key={index} value={`item-${index}`}>
                <AccordionTrigger className="text-lg text-left">{item.question}</AccordionTrigger>
                <AccordionContent className="text-muted-foreground text-base">
                  {item.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        ) : (searchQuery || selectedCategory) ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-8"
          >
            <p className="text-muted-foreground mb-4">
              No results found{searchQuery ? ` for "${searchQuery}"` : ' in this category'}
            </p>
            <Button variant="outline" onClick={() => {
              setSearchQuery('');
              setSelectedCategory(null);
            }}>
              Clear filters
            </Button>
          </motion.div>
        ) : null}
      </motion.section>
      
      <motion.section
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.6 }}
        className="text-center mt-16"
      >
        <h3 className="text-xl font-semibold">Can't find what you're looking for?</h3>
        <p className="text-muted-foreground mt-2 mb-6">Our support team is here to help.</p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Button className="flex items-center gap-2">
            <Mail className="h-4 w-4" />
            Email Support
          </Button>
          <Button variant="outline" className="flex items-center gap-2">
            <MessageCircle className="h-4 w-4" />
            Live Chat
          </Button>
          <Button variant="outline" className="flex items-center gap-2">
            <ExternalLink className="h-4 w-4" />
            Documentation
          </Button>
        </div>
      </motion.section>
    </div>
  );
}
